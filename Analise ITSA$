{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled30.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOpiuQ5wiQudTPqw0Xps9LW",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/feguedes/Projetos-de-DS/blob/main/Analise%20ITSA%24\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pa-rH1hO2STA"
      },
      "source": [
        "# Análise do papel ITSA4\n",
        "Utilizando a biblioteca do Python(Pandas), talvez a mais popular, de fácil manuseio. Iremos análisar o papel da empresa Itau.SA (ITSA4).\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YNBuKoox3H4q"
      },
      "source": [
        "## Instalando o Pandas\n",
        "Primeiramente vamos importar a biblioteca que consegue ler os arquivos disponiveis em: `csv` e `xls`. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BN0sfnwG1aZa"
      },
      "source": [
        "import pandas as pd"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4pFwZgQB3fM8"
      },
      "source": [
        "## Importando o arquivo csv\n",
        "Todos os dados foram obtidos no site [Yahoo Finance](https://finance.yahoo.com/quote/ITSA4.SA/history?p=ITSA4.SA) disponibilizei o arquivo [neste link](https://raw.githubusercontent.com/feguedes/Projetos-de-DS/main/ITSA4.SA.csv) onde você também pode fazer o download."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OFY4-zGH5_16"
      },
      "source": [
        "De maneira muito simples podemos importar qualquer arquivo csv utilizando o Pandas com o comando `pd.read_csv(\"locado_do_arquivo.csv\")`, colocando o endereço de onde o arquivo se encontra na sua máquina ou no endereço da internet."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "ef2T5yxe1cGF",
        "outputId": "647c8f76-139c-4b9d-d5d6-1cb1c3e69b9c"
      },
      "source": [
        "pd.read_csv(\"https://raw.githubusercontent.com/feguedes/Projetos-de-DS/main/ITSA4.SA.csv\")"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-06-08</td>\n",
              "      <td>10.17</td>\n",
              "      <td>10.45</td>\n",
              "      <td>10.16</td>\n",
              "      <td>10.40</td>\n",
              "      <td>10.054069</td>\n",
              "      <td>28408100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-06-09</td>\n",
              "      <td>10.18</td>\n",
              "      <td>10.52</td>\n",
              "      <td>10.07</td>\n",
              "      <td>10.36</td>\n",
              "      <td>10.015399</td>\n",
              "      <td>32069600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-06-10</td>\n",
              "      <td>10.50</td>\n",
              "      <td>10.50</td>\n",
              "      <td>10.01</td>\n",
              "      <td>10.03</td>\n",
              "      <td>9.696377</td>\n",
              "      <td>40216500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-06-12</td>\n",
              "      <td>9.70</td>\n",
              "      <td>9.87</td>\n",
              "      <td>9.55</td>\n",
              "      <td>9.79</td>\n",
              "      <td>9.464361</td>\n",
              "      <td>47426700.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-06-15</td>\n",
              "      <td>9.46</td>\n",
              "      <td>9.73</td>\n",
              "      <td>9.41</td>\n",
              "      <td>9.56</td>\n",
              "      <td>9.242011</td>\n",
              "      <td>30138200.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>241</th>\n",
              "      <td>2021-05-31</td>\n",
              "      <td>10.90</td>\n",
              "      <td>10.95</td>\n",
              "      <td>10.84</td>\n",
              "      <td>10.86</td>\n",
              "      <td>10.840000</td>\n",
              "      <td>15229500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>242</th>\n",
              "      <td>2021-06-01</td>\n",
              "      <td>10.89</td>\n",
              "      <td>11.27</td>\n",
              "      <td>10.88</td>\n",
              "      <td>11.27</td>\n",
              "      <td>11.270000</td>\n",
              "      <td>39070300.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>243</th>\n",
              "      <td>2021-06-02</td>\n",
              "      <td>11.31</td>\n",
              "      <td>11.65</td>\n",
              "      <td>11.24</td>\n",
              "      <td>11.64</td>\n",
              "      <td>11.640000</td>\n",
              "      <td>62914900.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>244</th>\n",
              "      <td>2021-06-04</td>\n",
              "      <td>11.59</td>\n",
              "      <td>11.93</td>\n",
              "      <td>11.59</td>\n",
              "      <td>11.90</td>\n",
              "      <td>11.900000</td>\n",
              "      <td>43365600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>245</th>\n",
              "      <td>2021-06-07</td>\n",
              "      <td>11.87</td>\n",
              "      <td>12.14</td>\n",
              "      <td>11.79</td>\n",
              "      <td>12.05</td>\n",
              "      <td>12.050000</td>\n",
              "      <td>38842500.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>246 rows × 7 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           Date   Open   High    Low  Close  Adj Close      Volume\n",
              "0    2020-06-08  10.17  10.45  10.16  10.40  10.054069  28408100.0\n",
              "1    2020-06-09  10.18  10.52  10.07  10.36  10.015399  32069600.0\n",
              "2    2020-06-10  10.50  10.50  10.01  10.03   9.696377  40216500.0\n",
              "3    2020-06-12   9.70   9.87   9.55   9.79   9.464361  47426700.0\n",
              "4    2020-06-15   9.46   9.73   9.41   9.56   9.242011  30138200.0\n",
              "..          ...    ...    ...    ...    ...        ...         ...\n",
              "241  2021-05-31  10.90  10.95  10.84  10.86  10.840000  15229500.0\n",
              "242  2021-06-01  10.89  11.27  10.88  11.27  11.270000  39070300.0\n",
              "243  2021-06-02  11.31  11.65  11.24  11.64  11.640000  62914900.0\n",
              "244  2021-06-04  11.59  11.93  11.59  11.90  11.900000  43365600.0\n",
              "245  2021-06-07  11.87  12.14  11.79  12.05  12.050000  38842500.0\n",
              "\n",
              "[246 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1K574Gv11hxJ"
      },
      "source": [
        "df = pd.read_csv(\"https://raw.githubusercontent.com/feguedes/Projetos-de-DS/main/ITSA4.SA.csv\")"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xj5QD2QG6pvT"
      },
      "source": [
        "Depois de importado atribuimos o nome do arquivo como `df` para facilitar e agilizar a codificação."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "-zwys3zm1lah",
        "outputId": "adfb7db7-c2d6-4e15-9955-c6391d257e92"
      },
      "source": [
        "df"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-06-08</td>\n",
              "      <td>10.17</td>\n",
              "      <td>10.45</td>\n",
              "      <td>10.16</td>\n",
              "      <td>10.40</td>\n",
              "      <td>10.054069</td>\n",
              "      <td>28408100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-06-09</td>\n",
              "      <td>10.18</td>\n",
              "      <td>10.52</td>\n",
              "      <td>10.07</td>\n",
              "      <td>10.36</td>\n",
              "      <td>10.015399</td>\n",
              "      <td>32069600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-06-10</td>\n",
              "      <td>10.50</td>\n",
              "      <td>10.50</td>\n",
              "      <td>10.01</td>\n",
              "      <td>10.03</td>\n",
              "      <td>9.696377</td>\n",
              "      <td>40216500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-06-12</td>\n",
              "      <td>9.70</td>\n",
              "      <td>9.87</td>\n",
              "      <td>9.55</td>\n",
              "      <td>9.79</td>\n",
              "      <td>9.464361</td>\n",
              "      <td>47426700.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-06-15</td>\n",
              "      <td>9.46</td>\n",
              "      <td>9.73</td>\n",
              "      <td>9.41</td>\n",
              "      <td>9.56</td>\n",
              "      <td>9.242011</td>\n",
              "      <td>30138200.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>241</th>\n",
              "      <td>2021-05-31</td>\n",
              "      <td>10.90</td>\n",
              "      <td>10.95</td>\n",
              "      <td>10.84</td>\n",
              "      <td>10.86</td>\n",
              "      <td>10.840000</td>\n",
              "      <td>15229500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>242</th>\n",
              "      <td>2021-06-01</td>\n",
              "      <td>10.89</td>\n",
              "      <td>11.27</td>\n",
              "      <td>10.88</td>\n",
              "      <td>11.27</td>\n",
              "      <td>11.270000</td>\n",
              "      <td>39070300.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>243</th>\n",
              "      <td>2021-06-02</td>\n",
              "      <td>11.31</td>\n",
              "      <td>11.65</td>\n",
              "      <td>11.24</td>\n",
              "      <td>11.64</td>\n",
              "      <td>11.640000</td>\n",
              "      <td>62914900.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>244</th>\n",
              "      <td>2021-06-04</td>\n",
              "      <td>11.59</td>\n",
              "      <td>11.93</td>\n",
              "      <td>11.59</td>\n",
              "      <td>11.90</td>\n",
              "      <td>11.900000</td>\n",
              "      <td>43365600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>245</th>\n",
              "      <td>2021-06-07</td>\n",
              "      <td>11.87</td>\n",
              "      <td>12.14</td>\n",
              "      <td>11.79</td>\n",
              "      <td>12.05</td>\n",
              "      <td>12.050000</td>\n",
              "      <td>38842500.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>246 rows × 7 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           Date   Open   High    Low  Close  Adj Close      Volume\n",
              "0    2020-06-08  10.17  10.45  10.16  10.40  10.054069  28408100.0\n",
              "1    2020-06-09  10.18  10.52  10.07  10.36  10.015399  32069600.0\n",
              "2    2020-06-10  10.50  10.50  10.01  10.03   9.696377  40216500.0\n",
              "3    2020-06-12   9.70   9.87   9.55   9.79   9.464361  47426700.0\n",
              "4    2020-06-15   9.46   9.73   9.41   9.56   9.242011  30138200.0\n",
              "..          ...    ...    ...    ...    ...        ...         ...\n",
              "241  2021-05-31  10.90  10.95  10.84  10.86  10.840000  15229500.0\n",
              "242  2021-06-01  10.89  11.27  10.88  11.27  11.270000  39070300.0\n",
              "243  2021-06-02  11.31  11.65  11.24  11.64  11.640000  62914900.0\n",
              "244  2021-06-04  11.59  11.93  11.59  11.90  11.900000  43365600.0\n",
              "245  2021-06-07  11.87  12.14  11.79  12.05  12.050000  38842500.0\n",
              "\n",
              "[246 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K4lQ1hcJ67v3"
      },
      "source": [
        "Ao invés de escrevermos toda hora `pd.read_csv(\"locado_do_arquivo.csv\")` podemos acessar apensa digitando `df`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4MrJwv827Xtw"
      },
      "source": [
        "## Conhecendo os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NWBYp4vL7b0X"
      },
      "source": [
        "Dados importados fica muito mais facil de explorar os atributos do DataFrame.\n",
        "Pode utilizar da função `df.head()` para visualizar as 5 primeiras entradas do conjunto de dados e `df.tail()` para exibir as 5 ultimas entradas do conjunto de dados.\n",
        "Normalmente quando importamos um *dataset* queremos dar uma breve olhada nas entradas para saber mais ou menos os dados que iremos lidar.\n",
        "Exemplo:\n",
        "* `df.head()` - exibe as 5 primeiras entradas do conjunto de dados\n",
        "* `df.tail()` - exibe as 5 últimas entradas do conjunto de dados\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "_QIToTYCFPRv",
        "outputId": "030e7727-fe3f-4ee6-d269-4c7ad7a956a8"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-06-08</td>\n",
              "      <td>10.17</td>\n",
              "      <td>10.45</td>\n",
              "      <td>10.16</td>\n",
              "      <td>10.40</td>\n",
              "      <td>10.054069</td>\n",
              "      <td>28408100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-06-09</td>\n",
              "      <td>10.18</td>\n",
              "      <td>10.52</td>\n",
              "      <td>10.07</td>\n",
              "      <td>10.36</td>\n",
              "      <td>10.015399</td>\n",
              "      <td>32069600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-06-10</td>\n",
              "      <td>10.50</td>\n",
              "      <td>10.50</td>\n",
              "      <td>10.01</td>\n",
              "      <td>10.03</td>\n",
              "      <td>9.696377</td>\n",
              "      <td>40216500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-06-12</td>\n",
              "      <td>9.70</td>\n",
              "      <td>9.87</td>\n",
              "      <td>9.55</td>\n",
              "      <td>9.79</td>\n",
              "      <td>9.464361</td>\n",
              "      <td>47426700.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-06-15</td>\n",
              "      <td>9.46</td>\n",
              "      <td>9.73</td>\n",
              "      <td>9.41</td>\n",
              "      <td>9.56</td>\n",
              "      <td>9.242011</td>\n",
              "      <td>30138200.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         Date   Open   High    Low  Close  Adj Close      Volume\n",
              "0  2020-06-08  10.17  10.45  10.16  10.40  10.054069  28408100.0\n",
              "1  2020-06-09  10.18  10.52  10.07  10.36  10.015399  32069600.0\n",
              "2  2020-06-10  10.50  10.50  10.01  10.03   9.696377  40216500.0\n",
              "3  2020-06-12   9.70   9.87   9.55   9.79   9.464361  47426700.0\n",
              "4  2020-06-15   9.46   9.73   9.41   9.56   9.242011  30138200.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "RdWYxDuD1mLS",
        "outputId": "883805a1-4eab-4cc5-a501-e49ad6e0190a"
      },
      "source": [
        "df.tail()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>241</th>\n",
              "      <td>2021-05-31</td>\n",
              "      <td>10.90</td>\n",
              "      <td>10.95</td>\n",
              "      <td>10.84</td>\n",
              "      <td>10.86</td>\n",
              "      <td>10.84</td>\n",
              "      <td>15229500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>242</th>\n",
              "      <td>2021-06-01</td>\n",
              "      <td>10.89</td>\n",
              "      <td>11.27</td>\n",
              "      <td>10.88</td>\n",
              "      <td>11.27</td>\n",
              "      <td>11.27</td>\n",
              "      <td>39070300.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>243</th>\n",
              "      <td>2021-06-02</td>\n",
              "      <td>11.31</td>\n",
              "      <td>11.65</td>\n",
              "      <td>11.24</td>\n",
              "      <td>11.64</td>\n",
              "      <td>11.64</td>\n",
              "      <td>62914900.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>244</th>\n",
              "      <td>2021-06-04</td>\n",
              "      <td>11.59</td>\n",
              "      <td>11.93</td>\n",
              "      <td>11.59</td>\n",
              "      <td>11.90</td>\n",
              "      <td>11.90</td>\n",
              "      <td>43365600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>245</th>\n",
              "      <td>2021-06-07</td>\n",
              "      <td>11.87</td>\n",
              "      <td>12.14</td>\n",
              "      <td>11.79</td>\n",
              "      <td>12.05</td>\n",
              "      <td>12.05</td>\n",
              "      <td>38842500.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           Date   Open   High    Low  Close  Adj Close      Volume\n",
              "241  2021-05-31  10.90  10.95  10.84  10.86      10.84  15229500.0\n",
              "242  2021-06-01  10.89  11.27  10.88  11.27      11.27  39070300.0\n",
              "243  2021-06-02  11.31  11.65  11.24  11.64      11.64  62914900.0\n",
              "244  2021-06-04  11.59  11.93  11.59  11.90      11.90  43365600.0\n",
              "245  2021-06-07  11.87  12.14  11.79  12.05      12.05  38842500.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mUffXmFQFXVJ"
      },
      "source": [
        "Uma das facilidades da biblioteca Pandas é a forma que ela consegue mostrar os dados como uma tabela para facil compreensão.\n",
        "Perceba a similaridade de uma planilha do excell com a disposição que o Pandas deixa as colunas:\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "taq9iVvaFw5P",
        "outputId": "b0d46cc3-49ff-4318-ef9d-db068a745346"
      },
      "source": [
        "# mostrar os nomes das colunas\n",
        "df.columns"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume'], dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jpNp-NzVF8E-"
      },
      "source": [
        "Outras váriaveis que podemos encontrar são:\n",
        "* Números que normalmente são de despesas e lucro ou preço essa váriavel é do tipo `float`.\n",
        "* Números que utilizamos como ano ou idade iremos desejar trabalhar com váriaveis do tipo `int`.\n",
        "* Datas completas possuindo `ano-mes-dia (2021-06-08)` vamos preferir utilizar como `datetime` para facilitar a  manipulação do *dataset*."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rw1iyIOQ1nWD",
        "outputId": "5927eee5-ad15-4109-b8e6-3ff4d703db2c"
      },
      "source": [
        "df.dtypes"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date          object\n",
              "Open         float64\n",
              "High         float64\n",
              "Low          float64\n",
              "Close        float64\n",
              "Adj Close    float64\n",
              "Volume       float64\n",
              "dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8WDC7zhGnt84"
      },
      "source": [
        "Também conseguimos localizar outras variáveis e valores ausentes nas célular, é por meio do comando `df.info()`\n",
        "Observe no exemplo a seguir:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MoK72Q0pn_yp",
        "outputId": "7563056b-4744-4905-da08-9e5b5706100b"
      },
      "source": [
        "df.info()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 246 entries, 0 to 245\n",
            "Data columns (total 7 columns):\n",
            " #   Column     Non-Null Count  Dtype  \n",
            "---  ------     --------------  -----  \n",
            " 0   Date       246 non-null    object \n",
            " 1   Open       245 non-null    float64\n",
            " 2   High       245 non-null    float64\n",
            " 3   Low        245 non-null    float64\n",
            " 4   Close      245 non-null    float64\n",
            " 5   Adj Close  245 non-null    float64\n",
            " 6   Volume     245 non-null    float64\n",
            "dtypes: float64(6), object(1)\n",
            "memory usage: 13.6+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1G0V1D9doEHt"
      },
      "source": [
        "### Selecionando colunas\n",
        "Para selecionar a coluna no *DataFrame* basta você colocar o nome da coluna entre colchetes dos dados importados.\n",
        "**Importante** o nome da coluna deve ser exatamente igual respeitando letras maiúsculas e minúsculas.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W2v8jkAkogii",
        "outputId": "48a6c97d-0de8-4cf1-e30e-715035eecec7"
      },
      "source": [
        "df[\"High\"]"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      10.45\n",
              "1      10.52\n",
              "2      10.50\n",
              "3       9.87\n",
              "4       9.73\n",
              "       ...  \n",
              "241    10.95\n",
              "242    11.27\n",
              "243    11.65\n",
              "244    11.93\n",
              "245    12.14\n",
              "Name: High, Length: 246, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HD17uPNno5Oj"
      },
      "source": [
        "Como no exemplo acima a coluna não possui caracteres especiais e nem espaços em branco. Assim você pode utilizar uma forma mais rápida de escrita.\n",
        "Ao invés de `df[\"High\"]` você pode usar `df.High`."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6xm_kXtSpUpP",
        "outputId": "278a3dd6-823d-4b66-f9f5-9710bad3817a"
      },
      "source": [
        "df.High"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      10.45\n",
              "1      10.52\n",
              "2      10.50\n",
              "3       9.87\n",
              "4       9.73\n",
              "       ...  \n",
              "241    10.95\n",
              "242    11.27\n",
              "243    11.65\n",
              "244    11.93\n",
              "245    12.14\n",
              "Name: High, Length: 246, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "15t85KfTpXDB"
      },
      "source": [
        "### Como calcular a média de uma coluna\n",
        "É muito simples depois que você está dentro da coluna você calcular a média, mediana, soma da coluna inteira, a média basta utilizar o comando `df.High.mean()`."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QwFEQG01pvQD",
        "outputId": "1338f76f-2712-4ee7-be21-063aaa5a2452"
      },
      "source": [
        "df.High.mean()"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10.453224489795918"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fIi2_A7-p1la"
      },
      "source": [
        "### Datas (`datetime`)\n",
        "\n",
        "Normalmente o Pandas não reconhecerá de maneira automática as datas.\n",
        "Como vimos anteriormente a coluna de data estava sendo indicada como um `object` logo precisaremos alterar para `datetime`.\n",
        "O proprio Pandas já disponibilisa uma função muito simples: `pd.to_datetime`."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a90v6Fjvqp2z",
        "outputId": "177d3cc4-8c09-4424-8709-284d4b336156"
      },
      "source": [
        "# antes da alteração\n",
        "df.Date"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      2020-06-08\n",
              "1      2020-06-09\n",
              "2      2020-06-10\n",
              "3      2020-06-12\n",
              "4      2020-06-15\n",
              "          ...    \n",
              "241    2021-05-31\n",
              "242    2021-06-01\n",
              "243    2021-06-02\n",
              "244    2021-06-04\n",
              "245    2021-06-07\n",
              "Name: Date, Length: 246, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4WAcz9bq1pC6"
      },
      "source": [
        "# conversão\n",
        "df.Date = pd.to_datetime(df.Date, format=\"%Y-%m-%d\")"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_o2TQoUBq20W",
        "outputId": "7dc35efb-ebb5-4c80-e707-10837e882fdb"
      },
      "source": [
        "# após a alteração\n",
        "df.Date"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     2020-06-08\n",
              "1     2020-06-09\n",
              "2     2020-06-10\n",
              "3     2020-06-12\n",
              "4     2020-06-15\n",
              "         ...    \n",
              "241   2021-05-31\n",
              "242   2021-06-01\n",
              "243   2021-06-02\n",
              "244   2021-06-04\n",
              "245   2021-06-07\n",
              "Name: Date, Length: 246, dtype: datetime64[ns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UW9NyhDdq9Dk"
      },
      "source": [
        "Nesse momento na parte `dtype` já consta datetime64 diferentemente do `object` lá em cima."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_Xs0rd_QrNJs",
        "outputId": "cb351231-f7fe-4738-b22e-e0c989f104e1"
      },
      "source": [
        "df.Date.dt.year"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      2020\n",
              "1      2020\n",
              "2      2020\n",
              "3      2020\n",
              "4      2020\n",
              "       ... \n",
              "241    2021\n",
              "242    2021\n",
              "243    2021\n",
              "244    2021\n",
              "245    2021\n",
              "Name: Date, Length: 246, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0ps2SQev2DFa",
        "outputId": "a69b114b-2802-481e-8549-33d8fe8e0d70"
      },
      "source": [
        "df.Date.dt.month"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      6\n",
              "1      6\n",
              "2      6\n",
              "3      6\n",
              "4      6\n",
              "      ..\n",
              "241    5\n",
              "242    6\n",
              "243    6\n",
              "244    6\n",
              "245    6\n",
              "Name: Date, Length: 246, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zvt02Fjc2GQf",
        "outputId": "75ed5929-2891-4609-906f-b23258cad36a"
      },
      "source": [
        "df.Date.dt.day"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       8\n",
              "1       9\n",
              "2      10\n",
              "3      12\n",
              "4      15\n",
              "       ..\n",
              "241    31\n",
              "242     1\n",
              "243     2\n",
              "244     4\n",
              "245     7\n",
              "Name: Date, Length: 246, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-ljlf8MwrcBC"
      },
      "source": [
        "Depois de um tratamento nos datos de seu *dataset* você consegue fazer alterações e manipulações com muito mais facilidade e agilidade."
      ]
    }
  ]
}